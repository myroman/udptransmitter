udptransmitter
==============

=== Server ===

Socket Info Structures And get_ifi_info_plus.c : 
We used the code provided in the get_ifi_info_plus.c file. This gave us the ability to walk
over all our interface that we are attached to. For each of these interfaces we set up a 
listening socket. We of course skipped the broadcast address as specified by the book. For 
each interface that we found we defined a data struct called socketInfo. Inside this struct 
we stored the socket file descriptor, the in_addr structuress for the ip addres, the network 
mask and the  subnet mask. In addition we also had a reference to the socket itself incase 
we needed it else where. These structures made it easier to manage all the information to 
calculate longest prefix matching and if the client was local or not detection. 

RTO Modifications for section 22.5 code:
Firstly, we changed rtt_stop to use integer arithmetics instead of a float one. To do this we store 
all relevant variables (including those from rtt_info) as integers. It also affected the calculation 
of smoothed mean deviation estimator inside of rtt_stop, which started giving obviously 
the wrong answer. To fix it we split the one-line formula into two lines. Next, the scale has been 
changed from seconds to milliseconds, which resulted in using the coefficient of 1000 in rtt_init, 
rtt_ts, and in unprtt.h. Finally, we replaced macros function RTT_RTOCALC with natural function calcRto
because macroses are erron-prone, because they treat arithmetic syntax a bit differently and unclear in 
return value type.
Finally, we took into the account the workflow of our scenario. 
Ideally we set an alarm using the calculated RTO value, but considering that generally we have workflow like this:
SEND->SEND->SEND, RECEIVE->RECEIVE->RECEIVE, we adjust RTO using "our" delta which is difference between 
the moment we received the ACK for chunk 1 and the moment we sent the chunk 2 to the client. Sometimes,
esp. when there are many losses in network, the delta can be really big, though it should not be bigger
than RTO itself, that is why when the difference between the RTO and delta is less than 1 second, that indicates
that time has already passed. Thus, we set our timeout to 1 second the lower bound on RTT.

ARQ Mechanisms:
Reliable Data transfer: We have implemented a circular buffer on both the client and the server.
This is a doubly linked circular linked list that holds the information about our intransit 
packets on the server side. And on the client side it is a similar doubly linked list that buffers
the packets it has received. It maintains pointers for the segments that are inorder such that the
consumer can wake up and consume all the buffer space in order. The client always acks the last inorder
segment that it has received.

Flow control:
Out TCP header that we defined has a field that the client populates with every ACK that it sends. This 
field contains the info about how many buffer slots the client has open at that present moment. When
the server receives the ACK, he parses sets the client's receiving window to this freshly update value 
that it just received. Before sending packets, the server takes the minimum across its cwin, client's 
advertised window, and its available space in the buffer. This allows the server never to overwhelm the 
clients receive buffer. 


Slow Start:
Cwin = 1 at the start and ssthresh equals the clients buffer space to start of with. While cwin is less
than ssthresh, for every ack we get back we increment 
